\relax 
\providecommand\hyper@newdestlabel[2]{}
\providecommand\HyperFirstAtBeginDocument{\AtBeginDocument}
\HyperFirstAtBeginDocument{\ifx\hyper@anchor\@undefined
\global\let\oldcontentsline\contentsline
\gdef\contentsline#1#2#3#4{\oldcontentsline{#1}{#2}{#3}}
\global\let\oldnewlabel\newlabel
\gdef\newlabel#1#2{\newlabelxx{#1}#2}
\gdef\newlabelxx#1#2#3#4#5#6{\oldnewlabel{#1}{{#2}{#3}}}
\AtEndDocument{\ifx\hyper@anchor\@undefined
\let\contentsline\oldcontentsline
\let\newlabel\oldnewlabel
\fi}
\fi}
\global\let\hyper@last\relax 
\gdef\HyperFirstAtBeginDocument#1{#1}
\providecommand\HyField@AuxAddToFields[1]{}
\providecommand\HyField@AuxAddToCoFields[2]{}
\@writefile{toc}{\contentsline {chapter}{\numberline {1}Basics}{1}{chapter.1}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\@writefile{toc}{\contentsline {section}{\numberline {1.1}Preprocessor directives}{1}{section.1.1}}
\@writefile{lol}{\contentsline {lstlisting}{\numberline {1.1}Prevent circular includes}{1}{lstlisting.1.1}}
\@writefile{toc}{\contentsline {section}{\numberline {1.2}Casting}{1}{section.1.2}}
\newlabel{itm:static_cast}{{3}{1}{Casting}{Item.3}{}}
\newlabel{itm:static_cast@cref}{{[enumi][3][]3}{1}}
\@writefile{toc}{\contentsline {section}{\numberline {1.3}Structs}{1}{section.1.3}}
\@writefile{toc}{\contentsline {section}{\numberline {1.4}Stack and heap}{2}{section.1.4}}
\@writefile{toc}{\contentsline {subsection}{\numberline {1.4.1}Freeing memory}{2}{subsection.1.4.1}}
\@writefile{lol}{\contentsline {lstlisting}{\numberline {1.2}Memory leak}{3}{lstlisting.1.2}}
\@writefile{lol}{\contentsline {lstlisting}{\numberline {1.3}Valgrind output}{3}{lstlisting.1.3}}
\@writefile{lol}{\contentsline {lstlisting}{\numberline {1.4}No memory leak}{3}{lstlisting.1.4}}
\@writefile{toc}{\contentsline {section}{\numberline {1.5}Strings}{4}{section.1.5}}
\@writefile{toc}{\contentsline {subsection}{\numberline {1.5.1}C style}{4}{subsection.1.5.1}}
\@writefile{toc}{\contentsline {subsection}{\numberline {1.5.2}C++ style}{4}{subsection.1.5.2}}
\@writefile{toc}{\contentsline {section}{\numberline {1.6}Exceptions}{4}{section.1.6}}
\@writefile{toc}{\contentsline {chapter}{\numberline {2}Object oriented programming}{5}{chapter.2}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\@writefile{toc}{\contentsline {section}{\numberline {2.1}Access specifiers}{5}{section.2.1}}
\@writefile{toc}{\contentsline {section}{\numberline {2.2}Reminder of syntax}{5}{section.2.2}}
\@writefile{lol}{\contentsline {lstlisting}{\numberline {2.1}SpreadsheetCell.h}{5}{lstlisting.2.1}}
\@writefile{lol}{\contentsline {lstlisting}{\numberline {2.2}SpreadsheetCell.cpp}{5}{lstlisting.2.2}}
\@writefile{toc}{\contentsline {section}{\numberline {2.3}Creating objects on the stack or heap}{6}{section.2.3}}
\@writefile{lol}{\contentsline {lstlisting}{\numberline {2.3}Creating objects on the stack}{6}{lstlisting.2.3}}
\@writefile{lol}{\contentsline {lstlisting}{\numberline {2.4}Creating objects on the heap}{6}{lstlisting.2.4}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.3.1}Using smart pointers}{6}{subsection.2.3.1}}
\@writefile{toc}{\contentsline {section}{\numberline {2.4}Constructors}{6}{section.2.4}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.4.1}Initialiser lists}{7}{subsection.2.4.1}}
\newlabel{lst:initialiserList}{{2.5}{7}{C++ gets it right with the name clash}{lstlisting.2.5}{}}
\newlabel{lst:initialiserList@cref}{{[lstlisting][5][2]2.5}{7}}
\@writefile{lol}{\contentsline {lstlisting}{\numberline {2.5}C++ gets it right with the name clash}{7}{lstlisting.2.5}}
\@writefile{lot}{\contentsline {table}{\numberline {2.1}{\ignorespaces Objects which must be included in the initialiser list}}{8}{table.2.1}}
\newlabel{tab:initialiserMandatory}{{2.1}{8}{Objects which must be included in the initialiser list}{table.2.1}{}}
\newlabel{tab:initialiserMandatory@cref}{{[table][1][2]2.1}{8}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.4.2}Copy constructors}{8}{subsection.2.4.2}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.4.2.1}What constructors the compiler generates}{9}{subsubsection.2.4.2.1}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.4.3}\texttt  {default} and \texttt  {delete} for compiler generated constructors (C++11)}{9}{subsection.2.4.3}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.4.4}Default constructors}{9}{subsection.2.4.4}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.4.4.1}When you need a default constructor}{10}{subsubsection.2.4.4.1}}
\@writefile{toc}{\contentsline {paragraph}{\numberline {2.4.4.1.1}Arrays}{10}{paragraph.2.4.4.1.1}}
\@writefile{lol}{\contentsline {lstlisting}{\numberline {2.6}Example of \emph  {initialisers}}{10}{lstlisting.2.6}}
\@writefile{toc}{\contentsline {paragraph}{\numberline {2.4.4.1.2}Creating objects inside another class}{10}{paragraph.2.4.4.1.2}}
\@writefile{toc}{\contentsline {paragraph}{\numberline {2.4.4.1.3}Subclasses}{11}{paragraph.2.4.4.1.3}}
\@writefile{toc}{\contentsline {section}{\numberline {2.5}Destructors}{11}{section.2.5}}
\@writefile{toc}{\contentsline {section}{\numberline {2.6}Assignment operator}{11}{section.2.6}}
\@writefile{toc}{\contentsline {section}{\numberline {2.7}Distinguishing copying from assignment}{12}{section.2.7}}
\@writefile{toc}{\contentsline {section}{\numberline {2.8}In class member initialisers}{12}{section.2.8}}
\bibcite{rvo}{\href  {https://www.ibm.com/developerworks/community/blogs/5894415f-be62-4bc0-81c5-3956e82276f3/entry/RVO_V_S_std_move?lang=en}{Return value optimisation}}
